package templates

import (
"fmt"
"github.com/Leo-Mart/goth-test/internal/models"
"go.mongodb.org/mongo-driver/bson/primitive"
)
templ CharacterDetails(character models.Character) {

<div class="grid grid-cols-6 gap-1 bg-gray-900" id="character-container" hx-on::after-settle="refreshWowheadLinks()">
  <section class="col-span-2 rounded-md border border-emerald-700 grid grid-cols-6 p-2">
    <div class="flex">
      <img class="shadow-md shadow-emerald-800 mx-2" src={ string(templ.URL(character.Media.Assets[0].Value)) } />
      <div class="mx-2">
        <h2 class="text-2xl text-gray-900 dark:text-white">{character.CharacterProfile.Name}</h2>
        <p class="text-base">
          {character.CharacterProfile.Race.Name}
          {character.CharacterProfile.Spec.Name}
          {character.CharacterProfile.Class.Name}
        </p>
      </div>
    </div>
  </section>
  <section class="col-span-4 row-span-4 rounded-md border border-emerald-700 p-2">
    <h2 class="text-2xl text-gray-900 dark:text-white">Eqipped Gear</h2>
    <h3 class="text-1xl text-gray-900 dark:text-white">{ fmt.Sprintf( "Equipped Item level: %d",
      character.CharacterProfile.ItemLevelEquipped)}
    </h3>
    <div class="divider divider-accent"></div>
    <div>
      <ul class="grid grid-cols-2">
        for _, i := range character.Gear.EquippedItems {
        <li>
          {{ itemUrl := fmt.Sprintf("https://www.wowhead.com/item=%d", i.Item.ItemId)}}
          <a href={ templ.URL(itemUrl)}></a>
        </li>
        }
      </ul>
      <button class="btn btn-accent" hx-put={ string(templ.URL(fmt.Sprintf("/update/%s",
        primitive.ObjectID.Hex(character.ID))))} hx-target="#character-container" hx-swap="outerHTML">Update
        character</button>
    </div>
  </section>
  <section class="col-start-1 col-span-6 rounded-md border border-emerald-700 p-2">
    <h2>Mythic+ Progression</h2>
    <div>
      <div>
        <span>{{ fmt.Sprintf("Current rating: %d", character.KeystoneProfile.CurrentRating.Rating) }}</span>
        <span>Totals runs: this many</span>
        <span>Total in time: this many</span>
        <span>Total bricked: too many</span>
        <span>MOAR?!</span>
      </div>
    </div>
    <div>
      <h3 class="text-2xl text-gray-900 dark:text-white">Best runs for current season</h3>
      <div class="divider divider-accent"></div>
      <ul>
        for _, i := range character.KeystoneProfile.CurrentPeriod.BestRuns {
        <li>

          {{ seconds := (i.Duration / 1000) % 60 }}
          {{ minutes :=i.Duration / (1000 * 60)}}

          <span>{ fmt.Sprintf("cleared in: %d:%d ", minutes, seconds) }</span>
          <span>{ fmt.Sprintf("Level: +%d ", i.KeystoneLevel)}</span>
          if i.CompletedInTime {

          <span>{ fmt.Sprintf("Success!") }</span>
          } else {

          <span>{ fmt.Sprintf("failed") }</span>
          }
          <span>{ fmt.Sprintf("Aquired :%f points", i.Rating.Rating) }</span>
        </li>
        }
      </ul>
    </div>
  </section>
</div>
}
